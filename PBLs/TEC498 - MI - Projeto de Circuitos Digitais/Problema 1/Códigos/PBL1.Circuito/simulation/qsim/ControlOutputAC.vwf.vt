// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/16/2021 23:07:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          controlOutputAC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlOutputAC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg snA0;
reg snA1;
reg snA2;
reg snA3;
reg snA4;
// wires                                               
wire OUT_AC;

// assign statements (if any)                          
controlOutputAC i1 (
// port map - connection between master ports and signals/registers   
	.OUT_AC(OUT_AC),
	.snA0(snA0),
	.snA1(snA1),
	.snA2(snA2),
	.snA3(snA3),
	.snA4(snA4)
);
initial 
begin 
#160000 $finish;
end 

// snA0
always
begin
	snA0 = 1'b0;
	snA0 = #80000 1'b1;
	#80000;
end 

// snA1
always
begin
	snA1 = 1'b0;
	snA1 = #40000 1'b1;
	#40000;
end 

// snA2
always
begin
	snA2 = 1'b0;
	snA2 = #20000 1'b1;
	#20000;
end 

// snA3
always
begin
	snA3 = 1'b0;
	snA3 = #10000 1'b1;
	#10000;
end 

// snA4
always
begin
	snA4 = 1'b0;
	snA4 = #5000 1'b1;
	#5000;
end 
endmodule

