// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2021 19:51:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mainCircuit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mainCircuit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] coin;
reg got_coin;
reg key_four;
reg key_one;
reg key_three;
reg key_two;
// wires                                               
wire back_money;
wire [7:0] d;
wire [0:3] enable_d;
wire release_product;

// assign statements (if any)                          
mainCircuit i1 (
// port map - connection between master ports and signals/registers   
	.back_money(back_money),
	.clk(clk),
	.coin(coin),
	.d(d),
	.enable_d(enable_d),
	.got_coin(got_coin),
	.key_four(key_four),
	.key_one(key_one),
	.key_three(key_three),
	.key_two(key_two),
	.release_product(release_product)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// coin[ 2 ]
initial
begin
	coin[2] = 1'b0;
end 
// coin[ 1 ]
initial
begin
	coin[1] = 1'b0;
	coin[1] = #180000 1'b1;
	coin[1] = #50000 1'b0;
end 
// coin[ 0 ]
initial
begin
	coin[0] = 1'b0;
end 

// got_coin
initial
begin
	got_coin = 1'b0;
	got_coin = #200000 1'b1;
	got_coin = #10000 1'b0;
end 

// key_four
initial
begin
	key_four = 1'b0;
end 

// key_one
initial
begin
	key_one = 1'b0;
	key_one = #80000 1'b1;
	key_one = #48000 1'b0;
end 

// key_three
initial
begin
	key_three = 1'b0;
	key_three = #10000 1'b1;
	key_three = #40000 1'b0;
end 

// key_two
initial
begin
	key_two = 1'b0;
end 
endmodule

