// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2021 19:39:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          maquina4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maquina4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg id_typed;
reg id_valid;
reg rst;
reg time_max_exb;
reg [3:0] val_product;
reg [3:0] val_tot;
// wires                                               
wire back_money;
wire release_product;
wire [0:2] state_now;

// assign statements (if any)                          
maquina4 i1 (
// port map - connection between master ports and signals/registers   
	.back_money(back_money),
	.clk(clk),
	.id_typed(id_typed),
	.id_valid(id_valid),
	.release_product(release_product),
	.rst(rst),
	.state_now(state_now),
	.time_max_exb(time_max_exb),
	.val_product(val_product),
	.val_tot(val_tot)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// id_typed
initial
begin
	id_typed = 1'b0;
	id_typed = #10000 1'b1;
	id_typed = #30000 1'b0;
end 

// id_valid
initial
begin
	id_valid = 1'b0;
	id_valid = #60000 1'b1;
	id_valid = #20000 1'b0;
end 

// time_max_exb
initial
begin
	time_max_exb = 1'b0;
	time_max_exb = #60000 1'b1;
	time_max_exb = #20000 1'b0;
	time_max_exb = #20000 1'b1;
	time_max_exb = #20000 1'b0;
end 
// val_product[ 3 ]
initial
begin
	val_product[3] = 1'b1;
end 
// val_product[ 2 ]
initial
begin
	val_product[2] = 1'b0;
end 
// val_product[ 1 ]
initial
begin
	val_product[1] = 1'b0;
end 
// val_product[ 0 ]
initial
begin
	val_product[0] = 1'b0;
end 
// val_tot[ 3 ]
initial
begin
	val_tot[3] = 1'b1;
end 
// val_tot[ 2 ]
initial
begin
	val_tot[2] = 1'b0;
end 
// val_tot[ 1 ]
initial
begin
	val_tot[1] = 1'b0;
end 
// val_tot[ 0 ]
initial
begin
	val_tot[0] = 1'b0;
end 
endmodule

